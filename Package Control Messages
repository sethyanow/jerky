Package Control Messages
========================

EmberScript:
-----------

  EmberScript syntax for Sublime Text 2/3
  =======================================
  
  Based on CoffeeScript syntax file grabbed from [Better CoffeeScript](https://github.com/aponxi/sublime-better-coffeescript) package by [@aponxi](https://github.com/aponxi).
  
  Contribution
  ------------
  
  Feel free to contribute and post issues!
  
  1. Fork this repository.
  2. Make changes in yours repo.
  3. Post pull request on Github.
  
  Thanks
  ------
  
  Thanks [@aponxi](https://github.com/aponxi) for CoffeeScript language file.
  


Better JavaScript:
-----------------

  Better JavaScript is now installed! To ensure that the updated syntax file and symbol list take
  effect, you may need to do the following:
  
  1. Close all open JavaScript/JSON files (including .sublime-settings files)
  2. Exit Sublime
  3. Delete the cache and index files in your Sublime user directory
  4. Re-open Sublime
  
  
  Uninstalling
  ------------
  Before uninstalling Better JavaScript, be sure close all open JavaScript/JSON
  files, and remove "JavaScript" from the "ignored_packages" list in your Sublime
  user settings. You can now safely uninstall the Better JavaScript package.
  
  It's normal to see a few errors from Sublime about not being able to find syntax files. Just exit
  Sublime and re-open it, and everything should be fixed.


Emmet:
-----

  Thank you for installing Emmet -- a toolkit that can greatly improve your workflow. Note that this plugin automatically downloads and installs PyV8 binary (see status bar message). 
  
  ******************************
  Please restart editor 
  to finish installation process 
  after PyV8 was downloaded.
  ******************************
  
  Tab key handler
  ==========================
  
  By default, Emmet allows you to expand abbreviations with Tab key in HTML, XML, HAML and CSS/SASS/LESS/Stylus documents. As a side effect, you canâ€™t use some of your ST2 snippets.
  
  Please read https://github.com/sergeche/emmet-sublime#tab-key-handler about how Tab handler works and how to tweak its behavior to match your needs.
  
  Enter key
  ==========================
  
  In HTML and XML documents, Emmet overrides Enter key to insert formatted line breaks between opening and closing tags. In some cases it will break character input (for example, in Japanese language).
  
  To disable Enter key handler, simply add the following option in your user's Preferences file:
  
  "disable_formatted_linebreak": true
  
  Actions shortcuts
  ==========================
  
  Emmet has a number of actions with keyboard shortcuts that may override ones you're using commonly (for example, Ctrl-E or Ctrl-Down). Please read the project main page to get list of available actions and keyboard shortcuts and how to disable them:
  https://github.com/sergeche/emmet-sublime
  
  Documentation and examples:
  http://emmet.io
  
  ------------------------------
  Follow me on Twitter: @emmetio
  ------------------------------
  


SublimeLinter:
-------------

  SublimeLinter
  =============
  
  SublimeLinter is a plugin that supports "lint" programs (known as "linters"). SublimeLinter highlights
  lines of code the linter deems to contain (potential) errors. It also
  supports highlighting special annotations (for example: TODO) so that they
  can be quickly located.
  
  SublimeLinter has built in linters for the following languages:
  
  * C/C++ - lint via `cppcheck`
  * CoffeeScript - lint via `coffee -s -l`
  * CSS - lint via built-in [csslint](http://csslint.net)
  * Git Commit Messages - lint via built-in module based on [A Note About Git Commit Messages](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html).
  * Haml - syntax check via `haml -c`
  * HTML - lint via `tidy` (actually [tidy for HTML5](http://w3c.github.com/tidy-html5/))
  * Java - lint via `javac -Xlint`
  * JavaScript - lint via built in [jshint](http://jshint.org), [jslint](http://jslint.com), or the [closure linter (gjslint)](https://developers.google.com/closure/utilities/docs/linter_howto) (if installed)
  * Lua - syntax check via `luac`
  * Objective-J - lint via built-in [capp_lint](https://github.com/aparajita/capp_lint)
  * Perl - lint via [Perl:Critic](http://perlcritic.com/) or syntax+deprecation check via `perl -c`
  * PHP - syntax check via `php -l`
  * Puppet - syntax check via `puppet parser validate`
  * Python - native, moderately-complete lint
  * Ruby - syntax check via `ruby -wc`
  * XML - lint via `xmllint`
  
  
  For more information:
  ---------------------
  Please take the time to read the documentation:
  
  * Online - https://github.com/SublimeLinter/SublimeLinter
  * Sublime Text - Select Preferences->Package Settings->SublimeLinter->README
  
  
  IMPORTANT
  
  Do NOT edit the default SublimeLinter settings. Your changes will be lost
  when SublimeLinter is updated. ALWAYS edit the user SublimeLinter settings
  by selecting "Preferences->Package Settings->SublimeLinter->Settings - User".
  Note that individual settings you include in your user settings will **completely**
  replace the corresponding default setting, so you must provide that setting in its entirety.
  
